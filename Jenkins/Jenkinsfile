pipeline {
    agent any  // Specify the node where the pipeline should run

    triggers {
        pollSCM('* * * * *')
    }

    stages {
        stage('Pull code from git repository') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/vvd0502/COSC2767-RMIT-Store']], poll: true])
            }
        }

        stage('Send files over SSH') {
            steps {
                script {
                    sshPublisher(publishers: [sshPublisherDesc(configName: 'ansible-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''
                        TEST_SERVER_IP='54.174.242.128'
                        PROD_SERVER_IP='54.144.197.26'
                        BUILDFILEPATH='Ansible/buildAndPushTest.yml'
                        PULLFILEPATH='Ansible/pullAndRunTest.yml'
                        PRIVILEGES="GRANT ALL PRIVILEGES ON *.* TO 'db_admin'@'$TEST_SERVER_IP', 'db_admin'@'$PROD_SERVER_IP';"

                        lineNum="$(nl webapp/sql-scripts/sql-script.sql | awk -v pattern="CREATE USER" 'tolower($0) ~ tolower(pattern) {print $1}')"
                        head -n ${lineNum} webapp/sql-scripts/sql-script.sql > webapp/sql-scripts/temp.sql
                        sed -i "s/'db_admin'@'localhost'/'db_admin'@'${TEST_SERVER_IP}'/g" webapp/sql-scripts/temp.sql ;
                        tail -n+${lineNum} webapp/sql-scripts/sql-script.sql >> webapp/sql-scripts/temp.sql
                        sed -i "s/'db_admin'@'localhost'/'db_admin'@'${PROD_SERVER_IP}'/g" webapp/sql-scripts/temp.sql ;
                        mv webapp/sql-scripts/temp.sql webapp/sql-scripts/sql-script.sql ;

                        lineNum="$(nl webapp/sql-scripts/sql-script.sql | awk -v pattern="CREATE DATABASE" 'tolower($0) ~ tolower(pattern) {print $1}')"
                        cp webapp/sql-scripts/sql-script.sql webapp/sql-scripts/temp.sql ;
                        sed -i 's/rmit_store_db/rmit_store_db_test/g' webapp/sql-scripts/temp.sql ;
                        tail -n+${lineNum} webapp/sql-scripts/sql-script.sql >> webapp/sql-scripts/temp.sql ;
                        mv webapp/sql-scripts/temp.sql webapp/sql-scripts/sql-script.sql ;
                        replacePattern="$(grep "GRANT ALL PRIVILEGES" webapp/sql-scripts/sql-script.sql)" ;
                        sed -i "s/$replacePattern/$PRIVILEGES/" webapp/sql-scripts/sql-script.sql ;

                        sed -i 's/"localhost"/getenv("DBHost")/' webapp/index.php ;
                        sed -i 's/"rmit_store_db"/"rmit_store_db_test", getenv("DBPort")/' webapp/index.php ;
                        ansible-playbook ${BUILDFILEPATH} ;
                        ansible-playbook ${PULLFILEPATH} ;
                    ''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: 'webapp', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '**/*')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Testing'
                script {
                    sshPublisher(publishers: [sshPublisherDesc(configName: 'ansible-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'sleep 15 ; ansible-playbook Ansible/runTest.yml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
            }
        }
    }
}
